@page "/ResetPassword"
@attribute [AllowAnonymous]

@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<PageTitle>Reset Password</PageTitle>


<div class="card-header text-center">
    <b>EGX Monitoring</b>
    <br />
    <img width="30%" height="30%" src="Images/EGXLogo.png" />
</div>
<div class="card-body">
    <p class="login-box-msg">Enter your username and password and confirm password to reset the password </p>

    <EditForm Model="User" OnValidSubmit="HandleReset">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="input-group mb-3">
            <InputText id="Username" @bind-Value="User.Username" class="form-control"></InputText>
            <br />
            <ValidationMessage For="@(() => User.Username)"></ValidationMessage>
            <div class="input-group-append">
                <div class="input-group-text">
                    <span class="fas fa-user"></span>
                </div>
            </div>
        </div>
        <div class="input-group mb-3">
            <InputText id="password" @bind-Value="User.Password" class="form-control" type="password"></InputText>
            <br />
            <ValidationMessage For="@(() => User.Password)"></ValidationMessage>
            <div class="input-group-append">
                <div class="input-group-text">
                    <span class="fas fa-lock"></span>
                </div>
            </div>
        </div>
        <div class="input-group mb-3">
            <InputText id="password" @bind-Value="User.ConfirmPassword" class="form-control" type="password"></InputText>
            <br />
            <ValidationMessage For="@(() => User.ConfirmPassword)"></ValidationMessage>
            <div class="input-group-append">
                <div class="input-group-text">
                    <span class="fas fa-lock"></span>
                </div>
            </div>
        </div>
        <div class="row">
            <!-- /.col -->
            <div class="col-12">
                <button type="submit" class="btn btn-primary btn-block">Reset</button>
            </div>

            <!-- /.col -->
        </div>
    </EditForm>

    <div class="text-danger">
        @errorMessage
    </div>
    <!-- /.social-auth-links -->



</div>

@code {
    private UserResetPassword User = new UserResetPassword();
    private string errorMessage = string.Empty;
    private string returnUrl = string.Empty;
    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }
    private async Task HandleReset()
    {
        var result = await AuthService.ChangePassword(User);
        if (result.Success && result.Data)
        {
            //     //errorMessage = string.Empty;
            //     await LocalStorage.SetItemAsync("authToken", result.Data);
            //     await AuthenticationStateProvider.GetAuthenticationStateAsync();
                 NavigationManager.NavigateTo("/login");
        }
        else
        {
                 errorMessage = result.Message;
        }
    }
}
