@page "/"
@inject IWidgetService WidgetService
@inject IJSRuntime jsRuntime
@attribute [Authorize]
<link rel="stylesheet" href="plugins/toastr/toastr.min.css">
<AuthorizeView>
    <style>
        .dark-tile-layout {
            background-color: #454d55;
            color: white;
        }

        .dark-tile-layout-card-Normal {
            background-color: #004444;
            color: white;
        }

        .dark-tile-layout-card-High {
            background-color: #290D4A;
            color: white;
        }

    </style>
    @if (WidgetInfo.Data != null)
    {
        <div>
            <div class="overlay"></div>
            <div class="alert">
                <img class="blink-ani" src="images/DangerIcon.png" width="100" height="100" />
                <p class="blink-ani" style="text-align:center">Alert</p>
                </div>
        </div>

        <TelerikTileLayout class="dark-tile-layout" Columns="12"
                           ColumnWidth="100%"
                           RowHeight="100%"
                           Height="Auto"
                           Reorderable="true"
                           Resizable="true">

            <TileLayoutItems>
                <div class="tiles-container">
                    @foreach (var widget in WidgetInfo.Data)
                    {
                        @if (widget.WidgetInfo.WIDGETTYPE == 1)
                        {
                            <TileLayoutItem class="@(widget.WidgetInfo.SEVERITY == 1?"dark-tile-layout-card-Normal":"dark-tile-layout-card-High")" ColSpan="3">
                                <HeaderTemplate>
                                    <h4 style="color:white">@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</h4>
                                </HeaderTemplate>
                                <Content>
                                    <SyncWidgetComponent SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                </Content>
                            </TileLayoutItem>
                        }
                        @if (widget.WidgetInfo.WIDGETTYPE == 2)
                        {
                            <TileLayoutItem class="@(widget.WidgetInfo.SEVERITY == 1?"dark-tile-layout-card-Normal":"dark-tile-layout-card-High")" ColSpan="3">
                                <HeaderTemplate>
                                    <h4 style="color:white">@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</h4>
                                </HeaderTemplate>
                                <Content>
                                    <StatusWidget WidgetInfo=@widget />
                                </Content>
                            </TileLayoutItem>
                        }
                        <WidgetInfoModal WidgetInfo="widget"></WidgetInfoModal>

                    }
                </div>
            </TileLayoutItems>
        </TelerikTileLayout>
        <button class="dismiss-button btn btn-danger" onclick="dismissOverlay()">Dismiss</button>

    }
    <style>
        .tiles-container {
            position: relative;
            z-index: 1;
        }
    </style>
    <audio id="Alert" src="/sounds/Alert.wav" loop></audio>
    <script>
        window.setAlert = function () {
            //audioElement.src = '/sounds/Alert.wav';
            var Alert = document.getElementById("Alert");
            Alert.play();
        };

        window.stopAlert = function () {
            var Alert = document.getElementById("Alert");
            Alert.pause();
            Alert.currentTime = 0;
        };

        window.isAlertOn = function () {
            var Alert = document.getElementById("Alert");
            return !Alert.paused;
        };

        function dismissOverlay() {
            var overlay = document.querySelector('.overlay');
            var alert = document.querySelector('.alert');
            var dismissButton = document.querySelector('.dismiss-button');

            overlay.style.display = 'none';
            alert.style.display = 'none';
            dismissButton.style.display = 'none';
        }
        function sendNotification(title, options) {
            if (Notification.permission === 'granted') {
                new Notification(title, options);
            }
        }
    </script>
</AuthorizeView>
@code {


    public ServiceResponse<List<ClientWidget>> WidgetInfo { get; set; } = new ServiceResponse<List<ClientWidget>>();
    private List<string> AlertWidgets = new List<string>();

    protected override async Task OnInitializedAsync()
    {
        WidgetInfo = await WidgetService.GetWidgetsInfo();
        //await jsRuntime.InvokeVoidAsync("setAlert");
        //bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn");
        bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn");


        if (await JSRuntime.InvokeAsync<string>("Notification.requestPermission") != "granted")
        {
            // Permission not granted, handle accordingly
        }
        else
        {
            await SendNotification();
        }
    }

    private async Task SendNotification()
    {
        await JSRuntime.InvokeVoidAsync("sendNotification", "Notification Title", new
        {
            body = "Notification Body",
            icon = "/images/DangerIcon.png",
            tag = "EGX-Montioring",
            renotify = true,
            requireInteraction = true,
        });
    }
    private async Task SetAlert(string parameter)
    {
        bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn");
        if (!AlertWidgets.Contains(parameter))
        {
            AlertWidgets.Add(parameter);
            if (!isPlaying)
            {
                await jsRuntime.InvokeVoidAsync("setAlert");
            }
        }
        else
        {
            if (!isPlaying)
            {
                await jsRuntime.InvokeVoidAsync("setAlert");
            }
        }
    }
    private async Task StopAlert(string parameter)
    {
        bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn");
        if (!AlertWidgets.Contains(parameter))
        {
            if (isPlaying && AlertWidgets.Count == 0)
            {
                await jsRuntime.InvokeVoidAsync("stopAlert");

            }
        }
        else
        {
            AlertWidgets.Remove(parameter);
            if (isPlaying && AlertWidgets.Count == 0)
            {
                await jsRuntime.InvokeVoidAsync("stopAlert");

            }
        }
    }





}
