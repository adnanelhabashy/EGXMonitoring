@page "/"
@inject IWidgetService WidgetService
@inject ISoundService SoundService
@inject IJSRuntime jsRuntime
@inject AuthenticationStateProvider _AuthProvider

@using System.Security.Claims
@using System.Text.Json

@attribute [Authorize]

<link rel="stylesheet" href="plugins/toastr/toastr.min.css">
<AuthorizeView>
<style>
        .dark-tile-layout {
            background-color: #454d55;
            color: white;
        }

        .dark-tile-layout-card-Red {
            background-color: #F44336;
            color: white;
        }

        .dark-tile-layout-card-Teal {
            background-color: #009688;
            color: white;
        }

        .dark-tile-layout-card-BlueGrey {
            background-color: #607D8B;
            color: white;
        }

        .dark-tile-layout-card-Indigo {
            background-color: #3F51B5;
            color: white;
        }

        .dark-tile-layout-card-Green {
            background-color: #4CAF50;
            color: white;
        }

        .dark-tile-layout-card-DeepOrange {
            background-color: #FF5722;
            color: white;
        }

        .dark-tile-layout-card-Purple {
            background-color: #9C27B0;
            color: white;
        }

        .dark-tile-layout-card-Lime {
            background-color: #CDDC39;
            color: white;
        }

        .dark-tile-layout-card-Cyan {
            background-color: #00BCD4;
            color: white;
        }

        .dark-tile-layout-card-DeepPurple {
            background-color: #673AB7;
            color: white;
        }

        .dark-tile-layout-card-Amber {
            background-color: #FFC107;
            color: white;
        }

        .dark-tile-layout-card-Blue {
            background-color: #2196F3;
            ;
            color: white;
        }

</style>
    @if (WidgetInfo.Data != null)
    {
        <div style="display: @(ShowAlert ? "block" : "none")">
            <div class="overlay"></div>
            <div class="alert">
                <img class="blink-ani" src="images/DangerIcon.png" width="100" height="100" />
                <p class="blink-ani" style="text-align:center">Alert</p>
            </div>
        </div>

        <br />

        <div class="row">
            <div class="col-md-12">
                <div class="card card-primary card-tabs">
                    <div class="card-header p-0 pt-1">
                        <ul class="nav nav-tabs" id="custom-tabs-five-tab" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link active" id="custom-tabs-five-overlay-tab" data-toggle="pill" href="#during-seesion" role="tab" aria-controls="custom-tabs-five-overlay" aria-selected="true">During Session</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link " id="custom-tabs-five-overlay-tab" data-toggle="pill" href="#end-of-day" role="tab" aria-controls="custom-tabs-five-overlay" aria-selected="true">End of day </a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link " id="custom-tabs-five-overlay-tab" data-toggle="pill" href="#running-procedures" role="tab" aria-controls="custom-tabs-five-overlay" aria-selected="true">Running Procedures</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link " id="custom-tabs-five-overlay-tab" data-toggle="pill" href="#vetting" role="tab" aria-controls="custom-tabs-five-overlay" aria-selected="true">Vetting</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link " id="custom-tabs-five-overlay-tab" data-toggle="pill" href="#bulletins-pdf" role="tab" aria-controls="custom-tabs-five-overlay" aria-selected="true">Bulletins PDF</a>
                            </li>
                        </ul>
                    </div>
                    <div class="card-body">
                        <div class="tab-content" id="custom-tabs-five-tabContent">
                            <div class="tab-pane fade show active" id="during-seesion" role="tabpanel" aria-labelledby="custom-tabs-five-overlay-tab">
                                <div class="overlay-wrapper">

                                    @if (isLoading)
                                    {
                                        <div class="overlay"><i class="fas fa-3x fa-sync-alt fa-spin"></i><div class="text-bold pt-2">Loading...</div></div>
                                    }
                                    @if (WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 1).Count() > 0)
                                    {
                                        <div class="button-container">
                                            <button class="custom-button" @onclick='() => SaveLayout("during-seesion")'>Save Layout</button>
                                        </div>
                                        <TelerikTileLayout @ref="@TileDuringSessionInstance"
                                                           class="dark-tile-layout" Columns="12"
                                                           ColumnWidth="100%"
                                                           RowHeight="100%"
                                                           Height="Auto"
                                                           Reorderable="true"
                                                           Resizable="true">
                                            <TileLayoutItems>
                                                <div class="tiles-container">
                                                    @foreach (var widget in WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 1))
                                                    {
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 1)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <SyncWidgetComponent SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 2)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <StatusWidget SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        <WidgetInfoModal WidgetInfo="widget"></WidgetInfoModal>

                                                    }
                                                </div>
                                            </TileLayoutItems>
                                        </TelerikTileLayout>
                                    }
                                    else
                                    {
                                        <p style="text-align:center">No widgets on this tab.</p>
                                    }

                                </div>
                            </div>
                            <div class="tab-pane fade show " id="end-of-day" role="tabpanel" aria-labelledby="custom-tabs-five-overlay-tab">
                                <div class="overlay-wrapper">
                                    @if (isLoading)
                                    {
                                        <div class="overlay"><i class="fas fa-3x fa-sync-alt fa-spin"></i><div class="text-bold pt-2">Loading...</div></div>
                                    }
                                    @if (WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 2).Count() > 0)
                                    {
                                        <div class="button-container">
                                            <button class="custom-button" @onclick='() => SaveLayout("end-of-day")'>Save Layout</button>
                                        </div>
                                        <TelerikTileLayout @ref="@TileEndOfDayInstance"
                                                           class="dark-tile-layout" Columns="12"
                                                           ColumnWidth="100%"
                                                           RowHeight="100%"
                                                           Height="Auto"
                                                           Reorderable="true"
                                                           Resizable="true">
                                            <TileLayoutItems>
                                                <div class="tiles-container">
                                                    @foreach (var widget in WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 2))
                                                    {
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 1)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <SyncWidgetComponent SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 2)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <StatusWidget SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        <WidgetInfoModal WidgetInfo="widget"></WidgetInfoModal>

                                                    }
                                                </div>
                                            </TileLayoutItems>
                                        </TelerikTileLayout>
                                    }
                                    else
                                    {
                                        <p style="text-align:center">No widgets on this tab.</p>
                                    }
                                </div>
                            </div>
                            <div class="tab-pane fade show " id="running-procedures" role="tabpanel" aria-labelledby="custom-tabs-five-overlay-tab">
                                <div class="overlay-wrapper">
                                    @if (isLoading)
                                    {
                                        <div class="overlay"><i class="fas fa-3x fa-sync-alt fa-spin"></i><div class="text-bold pt-2">Loading...</div></div>
                                    }
                                    @if (WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 3).Count() > 0)
                                    {
                                        <div class="button-container">
                                            <button class="custom-button" @onclick='() => SaveLayout("running-procedures")'>Save Layout</button>
                                        </div>
                                        <TelerikTileLayout @ref="@TileRunningProceduresInstance"
                                                           class="dark-tile-layout" Columns="12"
                                                           ColumnWidth="100%"
                                                           RowHeight="100%"
                                                           Height="Auto"
                                                           Reorderable="true"
                                                           Resizable="true">
                                            <TileLayoutItems>
                                                <div class="tiles-container">
                                                    @foreach (var widget in WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 3))
                                                    {
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 1)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <SyncWidgetComponent SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 2)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <StatusWidget SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        <WidgetInfoModal WidgetInfo="widget"></WidgetInfoModal>

                                                    }
                                                </div>
                                            </TileLayoutItems>
                                        </TelerikTileLayout>
                                    }
                                    else
                                    {
                                        <p style="text-align:center">No widgets on this tab.</p>
                                    }
                                </div>
                            </div>
                            <div class="tab-pane fade show " id="vetting" role="tabpanel" aria-labelledby="custom-tabs-five-overlay-tab">
                                <div class="overlay-wrapper">
                                    @if (isLoading)
                                    {
                                        <div class="overlay"><i class="fas fa-3x fa-sync-alt fa-spin"></i><div class="text-bold pt-2">Loading...</div></div>
                                    }
                                    @if (WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 4).Count() > 0)
                                    {
                                        <div class="button-container">
                                            <button class="custom-button" @onclick='() => SaveLayout("vetting")'>Save Layout</button>
                                        </div>
                                        <TelerikTileLayout @ref="@TileVettingInstance"
                                                           class="dark-tile-layout"
                                                           Columns="12"
                                                           ColumnWidth="100%"
                                                           RowHeight="100%"
                                                           Height="Auto"
                                                           Reorderable="true"
                                                           Resizable="true">
                                            <TileLayoutItems>
                                                <div class="tiles-container">
                                                    @foreach (var widget in WidgetInfo.Data.Where(w => w.WidgetInfo.TABID == 4))
                                                    {
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 1)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <SyncWidgetComponent SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        @if (widget.WidgetInfo.WIDGETTYPE == 2)
                                                        {
                                                            <TileLayoutItem class="@(widget.WidgetInfo.COLOR != null?widget.WidgetInfo.COLOR:"dark-tile-layout")" ColSpan="3">
                                                                <HeaderTemplate>
                                                                    <h4 style="color:white;text-align:center ;height: 10px;"><strong>@(widget.WidgetInfo.CHECKTYPE == 1 ? widget.WidgetInfo.NAME : widget.WidgetInfo.NAME + " Starts Working at " + widget.WidgetInfo.AFTERTIME.Value.ToString("hh:mm tt"))</strong></h4>
                                                                </HeaderTemplate>
                                                                <Content>
                                                                    <StatusWidget SetAlertEvent="SetAlert" StopAlertEvent="StopAlert" WidgetInfo=@widget />
                                                                </Content>
                                                            </TileLayoutItem>
                                                        }
                                                        <WidgetInfoModal WidgetInfo="widget"></WidgetInfoModal>

                                                    }
                                                </div>
                                            </TileLayoutItems>
                                        </TelerikTileLayout>
                                    }
                                    else
                                    {
                                        <p style="text-align:center">No widgets on this tab.</p>
                                    }
                                </div>
                            </div>
                            <div class="tab-pane fade show " id="bulletins-pdf" role="tabpanel" aria-labelledby="custom-tabs-five-overlay-tab">
                                <div class="overlay-wrapper">
                                    <iframe src="http://brkintra.egx.com/bulletins_files_Check/PDF_Monitor.aspx?output=embed"
                                            width="100%" frameborder="0" height="500">
                                    </iframe>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <button style="display:@(ShowAlert ? "block" : "none")" class="dismiss-button btn btn-danger" onclick="dismissOverlay()">Dismiss</button>

    }
    <style>
        .tiles-container {
            position: relative;
            z-index: 1;
        }
    </style>
    <audio id="Alert" src="/sounds/Alert.wav" loop></audio>
    <audio id="HighAlert" src="/sounds/HighAlert.wav" loop></audio>

    <script>
        window.setAlert = function (severity) {
            var Alert;
            if (severity == 1) {
                Alert = document.getElementById("Alert");
            }
            if (severity == 2) {
                Alert = document.getElementById("HighAlert");
            }
            Alert.play();
        };

        window.stopAlert = function (severity) {
            var Alert;
            if (severity == 1) {
                Alert = document.getElementById("Alert");
            }
            if (severity == 2) {
                Alert = document.getElementById("HighAlert");
            }
            Alert.pause();
            Alert.currentTime = 0;
        };

        window.isAlertOn = function (severity) {
            var Alert;
            if (severity == 1) {
                Alert = document.getElementById("Alert");
            }
            if (severity == 2) {
                Alert = document.getElementById("HighAlert");
            }
            return !Alert.paused;
        };

        function dismissOverlay() {
            var overlay = document.querySelector('.overlay');
            var alert = document.querySelector('.alert');
            var dismissButton = document.querySelector('.dismiss-button');

            overlay.style.display = 'none';
            alert.style.display = 'none';
            dismissButton.style.display = 'none';
        }

        function sendNotification(title, options) {
            if (Notification.permission === 'granted') {
                new Notification(title, options);
            }
        }
    </script>
</AuthorizeView>
@code {


    public ServiceResponse<List<ClientWidget>> WidgetInfo { get; set; } = new ServiceResponse<List<ClientWidget>>();

    public bool ShowAlert { get; set; } = false;
    public int ActiveTabIndex { get; set; } = 1;
    public bool isLoading { get; set; } = false;

    TelerikTileLayout TileDuringSessionInstance { get; set; }
    TelerikTileLayout TileEndOfDayInstance { get; set; }
    TelerikTileLayout TileRunningProceduresInstance { get; set; }
    TelerikTileLayout TileVettingInstance { get; set; }

    int UserId = 0;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        WidgetInfo = await WidgetService.GetWidgetsInfo();




        if (await JSRuntime.InvokeAsync<string>("Notification.requestPermission") != "granted")
        {
            // Permission not granted, handle accordingly
        }
        else
        {
            // await SendNotification();
        }


        isLoading = false;
        var authenticationState = await _AuthProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;
        UserId = Int32.Parse(user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)?.Value);
        await GetTabStates();

        //sound event subscribtions
        SoundService.AlertTurnOn += async (args) => await SetAlert(args);
        SoundService.HighAlertTurnOn += async (args) => await SetAlert(args);
        SoundService.AlertTurnOff += async (args) => await StopAlert(args);
        SoundService.HighAlertTurnOff += async (args) => await StopAlert(args);
    }
    private void SaveLayout(string tabName)
    {
        TabLayouts layout = new TabLayouts()
            {
                USERID = UserId,
                TABNAME = tabName,
            };
        switch (tabName)
        {
            case "during-seesion":
                layout.TABSTATE = System.Text.Json.JsonSerializer.Serialize(TileDuringSessionInstance.GetState());
                break;
            case "end-of-day":
                layout.TABSTATE = System.Text.Json.JsonSerializer.Serialize(TileEndOfDayInstance.GetState());
                break;
            case "running-procedures":
                layout.TABSTATE = System.Text.Json.JsonSerializer.Serialize(TileRunningProceduresInstance.GetState());
                break;
            case "vetting":
                layout.TABSTATE = System.Text.Json.JsonSerializer.Serialize(TileVettingInstance.GetState());
                break;

        }
        List<TabLayouts> layouts = new List<TabLayouts>();
        layouts.Add(layout);
        WidgetService.SetTabsLayout(layouts);
    }

    private async Task GetTabStates()
    {
        var response = await WidgetService.GetTabsLayout();
        List<TabLayouts> tabLayouts = response.Data;
        foreach (var tab in tabLayouts)
        {
            switch (tab.TABNAME)
            {
                case "during-seesion":
                    if (TileDuringSessionInstance != null)
                        TileDuringSessionInstance.SetState(System.Text.Json.JsonSerializer.Deserialize<TileLayoutState>(tab.TABSTATE));
                    break;
                case "end-of-day":
                    if (TileEndOfDayInstance != null)
                        TileEndOfDayInstance.SetState(System.Text.Json.JsonSerializer.Deserialize<TileLayoutState>(tab.TABSTATE));
                    break;
                case "running-procedures":
                    if (TileRunningProceduresInstance != null)
                        TileRunningProceduresInstance.SetState(System.Text.Json.JsonSerializer.Deserialize<TileLayoutState>(tab.TABSTATE));
                    break;
                case "vetting":
                    if (TileVettingInstance != null)
                        TileVettingInstance.SetState(System.Text.Json.JsonSerializer.Deserialize<TileLayoutState>(tab.TABSTATE));
                    break;
            }
        }
    }

    private async Task SendNotification(string Body)
    {
        await JSRuntime.InvokeVoidAsync("sendNotification", "Major Error Alert", new
        {
            body = Body,
            icon = "/images/DangerIcon.png",
            tag = "EGX-Montioring",
            renotify = true,
            requireInteraction = true,
        });
    }

    private async Task SetAlert(AlertEventData eventData)
    {
        bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn", eventData.Severity);
        if (!isPlaying)
        {
            await jsRuntime.InvokeVoidAsync("setAlert", eventData.Severity);
        }
        if (eventData.Severity == 2 && !ShowAlert)
        {
            ShowAlert = true;
            StateHasChanged();
            await SendNotification("There is an urgent error in the (" + eventData.Message + ") widget");
        }
    }
    private async Task StopAlert(AlertEventData eventData)
    {
        bool isPlaying = await jsRuntime.InvokeAsync<bool>("isAlertOn", eventData.Severity);
        if (isPlaying)
        {
            await jsRuntime.InvokeVoidAsync("stopAlert", eventData.Severity);
        }
        if (eventData.Severity == 2 && ShowAlert)
        {
            ShowAlert = false;
            StateHasChanged();
        }
    }
}







