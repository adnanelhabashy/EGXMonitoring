@inject IWidgetService WidgetService
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
<style>
    .validation-message {
        font-size: 12px;
        color: red;
        margin-top: 4px;
        display: block;
        align-items: center;
    }
</style>
<div class="modal fade" id="AddWidget" tabindex="-1" role="dialog" aria-labelledby="Add Widget" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">New Widget</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="WidgetInfo.WidgetInfo" OnValidSubmit="AddWidget">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-body">
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Name</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.NAME" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.NAME)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Refresh Interval (in seconds)</label>
                        <div class="col-sm-10">
                            <InputNumber type="text" @bind-Value="WidgetInfo.WidgetInfo.REFRESHINTERVAL" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.REFRESHINTERVAL)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Alarm After (in minutes)</label>
                        <div class="col-sm-10">
                            <InputNumber type="text" @bind-Value="WidgetInfo.WidgetInfo.ALARMAFTER" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.ALARMAFTER)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">SQL Command</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.SQLCOMMAND" class="form-control uppercase" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.SQLCOMMAND)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">Connection String</label>
                        <div class="col-sm-10">
                            <InputTextArea type="text" @bind-Value="WidgetInfo.ConnectionString" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.ConnectionString)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">Value Column</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.VALUECOLMN" class="form-control uppercase" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.VALUECOLMN)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Group Column</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.GROUPCOLUMN" class="form-control uppercase" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.GROUPCOLUMN)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Description</label>
                        <div class="col-sm-10">
                            <InputTextArea type="text" @bind-Value="WidgetInfo.WidgetInfo.DESCRIPTION" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.DESCRIPTION)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Widget Type</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.WIDGETTYPE" class="custom-select" placeholder="">
                                    <option value="1">Sync Widget</option>
                                    <option value="2">Status Widget</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.WIDGETTYPE)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Tab To Place</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.TABID" class="custom-select" placeholder="">
                                    <option value="1">During Session</option>
                                    <option value="2">End of Day </option>
                                    <option value="3">Running Procedures</option>
                                    <option value="4">Vetting</option>
                                </InputSelect>
                                <ValidationMessage class="validation-message" For="@(() => WidgetInfo.WidgetInfo.TABID)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Severity</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.SEVERITY" class="custom-select" placeholder="">
                                    <option value="1">Medium</option>
                                    <option value="2">High</option>
                                </InputSelect>
                                <ValidationMessage class="validation-message" For="@(() => WidgetInfo.WidgetInfo.SEVERITY)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Widget Color</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.COLOR" class="custom-select" @onchange="HandleCheckTypeChange" placeholder="">
                                    <option value="dark-tile-layout-card-Red" style="background-color: #F44336;">
                                        Red
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Teal" style="background-color: #009688 ;">
                                        Teal
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-BlueGrey" style="background-color: #607D8B;">
                                        Blue Grey
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Indigo" style="background-color: #3F51B5 ;">
                                        Indigo
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Green" style="background-color: #4CAF50;">
                                        Green
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-DeepOrange" style="background-color: #FF5722;">
                                        Deep Orange
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Purple" style="background-color: #9C27B0;">
                                        Purple
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Lime" style="background-color:#CDDC39;">
                                        Lime
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Cyan" style="background-color:#00BCD4;">
                                        Cyan
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-DeepPurple" style="background-color:#673AB7;">
                                        Deep Purple
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Amber" style="background-color:#FFC107;">
                                        Amber
                                        <span class="color-box"></span>
                                    </option>
                                    <option value="dark-tile-layout-card-Blue" style="background-color:#2196F3;">
                                        Blue
                                        <span class="color-box"></span>
                                    </option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.COLOR)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Widget font size</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.FONTSIZE" class="custom-select" @onchange="HandleCheckTypeChange" placeholder="">
                                    <option value="10">
                                        10px
                                    </option>
                                    <option value="11">
                                        11px
                                    </option>
                                    <option value="12">
                                        12px
                                    </option>
                                    <option value="13">
                                        13px
                                    </option>
                                    <option value="14">
                                        14px
                                    </option>
                                    <option value="15">
                                        15px
                                    </option>
                                    <option value="16">
                                        16px
                                    </option>
                                    <option value="17">
                                        17px
                                    </option>
                                    <option value="18">
                                        18px
                                    </option>
                                    <option value="19">
                                        19px
                                    </option>
                                    <option value="20">
                                        20px
                                    </option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.FONTSIZE)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Check Type</label>

                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.CHECKTYPE" class="custom-select" @onchange="HandleCheckTypeChange" placeholder="">
                                    <option value="1">Instant</option>
                                    <option value="2">Time Interval</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.CHECKTYPE)"></ValidationMessage>
                            </div>
                        </div>
                    </div>

                    @if (showTimeInputs || WidgetInfo.WidgetInfo.CHECKTYPE == 2)
                    {
                        <div class="bootstrap-timepicker row">
                            <div class="form-group col-sm-4">
                                <label>Time Start</label>
                                <InputDate Type="InputDateType.Time" class="form-control datetimepicker-input" @bind-Value="@WidgetInfo.WidgetInfo.AFTERTIME" />
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.AFTERTIME)"></ValidationMessage>
                            </div>
                            <div class="form-group col-sm-4">
                                <label>Time End</label>
                                <InputDate Type="InputDateType.Time" class="form-control datetimepicker-input" @bind-Value="@WidgetInfo.WidgetInfo.ENDTIME" />
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.ENDTIME)"></ValidationMessage>
                            </div>
                        </div>
                    }
                </div>
                <div class="form-group col-sm-4">
                    <label>Run In Background and send mail notification :</label>
                    <InputCheckbox @bind-Value="_sendMail" />
                    <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.ENDTIME)"></ValidationMessage>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"> Close </button>
                    <button type="submit" class="btn btn-primary"> Add Widget </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<style>
    input[type="text"].uppercase {
        text-transform: uppercase;
    }

    .color-box {
        width: 20px;
        height: 20px;
        display: inline-block;
        margin-left: 5px;
        vertical-align: middle;
        border: 1px solid #000;
    }
</style>
@code {
    public ClientWidget? WidgetInfo { get; set; }
    private bool showTimeInputs = false;
    ServiceResponse<ClientWidget> response = new ServiceResponse<ClientWidget>();
    private bool _sendMail { get; set; }

    protected override async Task OnInitializedAsync()
    {
        WidgetInfo = new ClientWidget();
        WidgetInfo.WidgetInfo = new Widget();
        WidgetInfo.WidgetInfo.CHECKTYPE = 1;
        WidgetInfo.WidgetInfo.WIDGETTYPE = 1;
        WidgetInfo.WidgetInfo.TABID = 1;
        WidgetInfo.WidgetInfo.SEVERITY = 1;
        WidgetInfo.WidgetInfo.SENDMAIL = 0;
    }
    private void HandleCheckTypeChange(ChangeEventArgs e)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        showTimeInputs = (selectedValue == 2);
        StateHasChanged();
    }

    private async Task AddWidget()
    {
        if (WidgetInfo != null)
        {
            if (_sendMail)
                WidgetInfo.WidgetInfo.SENDMAIL = 1;
            else
                WidgetInfo.WidgetInfo.SENDMAIL = 0;
            response = await WidgetService.AddWidget(WidgetInfo);

            if (response.Success)
            {
                await JSRuntime.InvokeVoidAsync("toastSuccess", WidgetInfo.WidgetInfo.NAME, "Add Status", response.Message);

            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastDanger", WidgetInfo.WidgetInfo.NAME, "Add Status", response.Message);

            }
        }
    }
}
