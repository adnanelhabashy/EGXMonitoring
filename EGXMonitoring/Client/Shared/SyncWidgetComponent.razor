@inject IWidgetService WidgetService
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using System.Globalization
@using System.Data



<div class="card" id="Card-@WidgetInfo.WidgetInfo.NAME">
    <div class="card-header border-transparent">
        <h3 class="card-title"><strong>Sync Widget</strong></h3>

        <div class="card-tools">
            <button type="button" @onclick="ToggleFullScreen" class="btn btn-tool">
                <i class="fa fa-fw fa-bars"></i>
            </button>
            @*             <button type="button" class="btn btn-tool" data-card-widget="collapse">
            <i class="fas fa-minus"></i>
            </button> *@
            <button type="button" @onclick="RefreshWidget" class="btn btn-tool">
                <i class="fa fa-fw fa-retweet"></i>
            </button>
            <div class="btn btn-tool">@DateTime.Now.ToString("hh:mm:ss tt")</div>
        </div>
    </div>
    <!-- /.card-header -->
    @if (isLoading)
    {
        <div class="loading-animation">

            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <div class="card-body p-0">
            @if (Data.Success)
            {
                <div class="table-responsive">
                    <table class="table m-0">
                        <thead>
                            <tr>
                                @foreach (var column in table.Columns)
                                {
                                    <th>@column.ToString()</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (!string.IsNullOrEmpty(WidgetInfo.WidgetInfo.GROUPCOLUMN))
                            {
                                var groupedData = table.AsEnumerable()
                                .GroupBy(row => row.Field<string>(WidgetInfo.WidgetInfo.GROUPCOLUMN));

                                @foreach (var group in groupedData)
                                {
                                    if (errors.Contains(@group.Key))
                                    {
                                        var lowestValue = group.Min(row => row.Field<string>(WidgetInfo.WidgetInfo.VALUECOLMN));
                                        if (!SearchErrorTime(@group.Key))
                                        {
                                            ErrorTime[@group.Key] = DateTime.Now;
                                        }
                                        string warningLevel = string.Empty;
                                        if (WidgetInfo.WidgetInfo.CHECKTYPE == 1)
                                        {
                                            warningLevel = ProcessWarning(GetErrortime(group.Key).ToString("hh:mm:ss tt"), group.Key);
                                        }
                                        if (WidgetInfo.WidgetInfo.CHECKTYPE == 2)
                                        {
                                            DateTime currentDateTime = DateTime.Now;
                                            if (WidgetInfo.WidgetInfo.AFTERTIME.HasValue && currentDateTime.TimeOfDay > WidgetInfo.WidgetInfo.AFTERTIME.Value.TimeOfDay && currentDateTime.TimeOfDay < WidgetInfo.WidgetInfo.ENDTIME.Value.TimeOfDay)
                                            {
                                                warningLevel = ProcessWarning(GetErrortime(group.Key).ToString("hh:mm:ss tt"), group.Key);
                                            }
                                        }
                                        if (warningLevel == "blinking3-row")
                                        {
                                            JSRuntime.InvokeVoidAsync("toast", "Alert in" + WidgetInfo.WidgetInfo.NAME, @group.Key, "not in sync since :" + ErrorTime[@group.Key].ToString(), lowestValue);
                                        }
                                        <tr class="@warningLevel" style="background-color:#423d3c;color:red">
                                            <td colspan="@table.Columns.Count" style="text-align: center;">
                                                @group.Key Not in sync since <strong>@GetErrortime(@group.Key).ToString("hh:mm:ss tt")</strong>
                                                <label style="margin: 20px;">
                                                    <input type="checkbox" @onclick="()=> IgnoreWarning(group.Key)" checked="@IsWarningIgnored(group.Key)"> Avoid Check
                                                </label>

                                            </td>

                                        </tr>
                                        @foreach (DataRow row in group)
                                        {
                                            var columnValue = row.Field<string>(WidgetInfo.WidgetInfo.VALUECOLMN);
                                            <tr class="red-tint" style="@(columnValue == lowestValue ? "background-color:black;color:red" : "")">
                                                @foreach (DataColumn column in table.Columns)
                                                {
                                                    <td>@row[column]</td>
                                                }
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        if (SearchErrorTime(@group.Key))
                                        {
                                            RemoveErrorTime(@group.Key);
                                        }
                                        <tr>
                                            <td colspan="@table.Columns.Count">
                                                @group.Key
                                                <label style="margin: 20px;">
                                                    <input type="checkbox" @onclick="()=> IgnoreWarning(group.Key)" checked="@IsWarningIgnored(group.Key)"> Avoid Check
                                                </label>


                                            </td>
                                        </tr>
                                        @foreach (DataRow row in group)
                                        {
                                            <tr style="background-color:grey">
                                                @foreach (DataColumn column in table.Columns)
                                                {
                                                    <td>@row[column]</td>
                                                }
                                            </tr>
                                        }
                                    }
                                }
                            }
                            else
                            {
                                @foreach (DataRow row in table.Rows)
                                {
                                    <tr>
                                        @foreach (DataColumn column in table.Columns)
                                        {
                                            <td>@row[column]</td>
                                        }
                                    </tr>
                                }
                            }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="card-body p-0">
                    <div class="text-container blinking3-row" style="min-height: 200px;">
                        <span style=" font-size: 18px;" class="centered-text"><strong>The following error occured : </strong>@Data.Message</span>
                    </div>
                </div>
            }

            <!-- /.table-responsive -->
        </div>
    }
    <!-- /.card-body -->
    <div class="card-footer clearfix">
        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#@WidgetInfo.WidgetInfo.NAME.Replace(" ", "")">
            Launch Widget Information
        </button>
    </div>
    <!-- /.card-footer -->
</div>

@* <WidgetInfoModal WidgetInfo="WidgetInfo"></WidgetInfoModal>
 *@


<script>
    window.enterFullScreen = function (elementId) {
        const element = document.getElementById(elementId);
        if (element.requestFullscreen) {
            element.requestFullscreen();
        } else if (element.mozRequestFullScreen) {
            element.mozRequestFullScreen();
        } else if (element.webkitRequestFullscreen) {
            element.webkitRequestFullscreen();
        } else if (element.msRequestFullscreen) {
            element.msRequestFullscreen();
        }
    };

    window.exitFullScreen = function () {
        if (document.exitFullscreen) {
            document.exitFullscreen();
        } else if (document.mozCancelFullScreen) {
            document.mozCancelFullScreen();
        } else if (document.webkitExitFullscreen) {
            document.webkitExitFullscreen();
        } else if (document.msExitFullscreen) {
            document.msExitFullscreen();
        }
    };

    function toast(title, subtitle, body) {
        const toastOptions = {
            class: 'bg-danger',
            title: title,
            subtitle: subtitle,
            body: body,
            position: 'bottomLeft',
            autohide: true,
            delay: 10000,
        };
        $(document).Toasts('create', toastOptions);
    }
</script>

@code {
    [Parameter]
    public ClientWidget WidgetInfo { get; set; }
    private Timer timer;
    private int refreshIntervalInSeconds;
    DataTable table = new DataTable();
    string message = string.Empty;
    List<string> errors = new List<string>();
    private bool isFullScreen = false;

    private bool isLoading = true;

    public int? Level1 { get; set; }
    public int? Level2 { get; set; }
    public int? Level3 { get; set; }

    Dictionary<string, DateTime> ErrorTime = new Dictionary<string, DateTime>();
    Dictionary<string, bool> IgnoredWarnings = new Dictionary<string, bool>();

    ServiceResponse<DataTable> Data = new ServiceResponse<DataTable>();

    private bool isPlaying;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Success ? Data.Data : null;
        message = Data.Success ? Data.Message : "";
        errors = Data.Success ? message.Split(";").ToList() : new List<string>();

        //ColumnNames = Rows[0].Keys.ToList();
        refreshIntervalInSeconds = WidgetInfo.WidgetInfo.REFRESHINTERVAL;
        timer = new Timer(RefreshWidget, null, TimeSpan.Zero, TimeSpan.FromSeconds(refreshIntervalInSeconds));
        setWarningLevels(WidgetInfo.WidgetInfo.ALARMAFTER);
        isLoading = false;

    }

    private async void RefreshWidget(object state)
    {

        Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Success ? Data.Data : null;
        message = Data.Success ? Data.Message : "";
        errors = Data.Success ? message.Split(";").ToList() : new List<string>();
        // Call the StateHasChanged method to notify the component to re-render
        await InvokeAsync(StateHasChanged);

    }

    private bool IsWarningIgnored(string groupname)
    {
        bool containsKey = IgnoredWarnings.ContainsKey(groupname);
        if (!containsKey)
        {
            IgnoredWarnings[groupname] = false; // Set the initial value to false
        }
        return IgnoredWarnings[groupname];
    }

    private void IgnoreWarning(string groupname)
    {
        IgnoredWarnings[groupname] = !IgnoredWarnings[groupname];
    }

    private async Task ToggleFullScreen()
    {
        isFullScreen = !isFullScreen;

        if (isFullScreen)
        {
            await JSRuntime.InvokeVoidAsync("enterFullScreen", "Card-" + WidgetInfo.WidgetInfo.NAME);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("exitFullScreen");
        }
    }

    private async Task ShowToast(string group, string time, string value)
    {
        await JSRuntime.InvokeVoidAsync("toast", "Alert in" + WidgetInfo.WidgetInfo.NAME, group, time, value);

    }


    private bool SearchErrorTime(string groupname)
    {
        bool containsKey = ErrorTime.ContainsKey(groupname);
        return containsKey;
    }

    private DateTime GetErrortime(string groupname)
    {
        return ErrorTime[groupname];
    }

    private void RemoveErrorTime(string groupname)
    {
        bool removed = ErrorTime.Remove(groupname);
    }

    private void setWarningLevels(int? minutes)
    {
        int? milseconds = minutes * 60 * 1000;

        Level1 = milseconds / 3;
        Level2 = Level1 * 2;
        Level3 = Level1 * 3;
    }

    private string ProcessWarning(string time, string groupname)
    {
        DateTime currentTime = DateTime.Now;
        DateTime parsedTime = DateTime.ParseExact(time, "hh:mm:ss tt", CultureInfo.InvariantCulture);
        TimeSpan timeDifference = parsedTime - currentTime;
        long timeDifferenceMilliseconds = (long)timeDifference.TotalMilliseconds * -1;

        if (IsWarningIgnored(groupname))
        {
            return ""; // Return empty string to disable warning styling
        }
        if (timeDifferenceMilliseconds >= 0 && timeDifferenceMilliseconds <= Level1)
        {
            return "blinking1-row";
        }
        else if (timeDifferenceMilliseconds >= Level1 && timeDifferenceMilliseconds <= Level2)
        {
            return "blinking2-row";
        }
        else if (timeDifferenceMilliseconds >= Level2 && timeDifferenceMilliseconds <= Level3)
        {
            return "blinking3-row";
        }
        else
        {
            return "blinking3-row";
        }
    }


}
