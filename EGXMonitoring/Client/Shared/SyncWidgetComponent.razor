@inject IWidgetService WidgetService

@using System.Data
<br />
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header border-transparent">
                <h3 class="card-title">@WidgetInfo.WidgetInfo.NAME</h3>

                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>

                </div>
            </div>
            <!-- /.card-header -->
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table m-0">
                        <thead>
                            <tr>
                                @foreach (var column in table.Columns)
                                {
                                    <th>@column.ToString()</th>
                                }
                            </tr>
                        </thead>
                        <tbody>
                            @if (!string.IsNullOrEmpty(WidgetInfo.WidgetInfo.GROUPCOLUMN))
                            {
                                var groupedData = table.AsEnumerable()
                                .GroupBy(row => row.Field<string>(WidgetInfo.WidgetInfo.GROUPCOLUMN));

                                @foreach (var group in groupedData)
                                {
                                    if (errors.Contains(@group.Key))
                                    {

                                        var lowestValue = group.Min(row => row.Field<string>(WidgetInfo.WidgetInfo.VALUECOLMN));


                                        <tr style="background-color:#423d3c;color:red">
                                            <td colspan="@table.Columns.Count">@group.Key</td>
                                        </tr>
                                        @foreach (DataRow row in group)
                                        {
                                            var columnValue = row.Field<string>(WidgetInfo.WidgetInfo.VALUECOLMN);
                                            <tr class="red-tint" style="@(columnValue == lowestValue ? "background-color:black;color:red" : "")">
                                                @foreach (DataColumn column in table.Columns)
                                                {
                                                    <td>@row[column]</td>
                                                }
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="@table.Columns.Count">@group.Key</td>
                                        </tr>
                                        @foreach (DataRow row in group)
                                        {
                                            <tr style="background-color:grey">
                                                @foreach (DataColumn column in table.Columns)
                                                {
                                                    <td>@row[column]</td>
                                                }
                                            </tr>
                                        }
                                    }
                                    
                                }
                            }
                            else
                            {
                                @foreach (DataRow row in table.Rows)
                                {
                                    <tr>
                                        @foreach (DataColumn column in table.Columns)
                                        {
                                            <td>@row[column]</td>
                                        }
                                    </tr>
                                }


                            }
                        </tbody>
                    </table>
                </div>
                <!-- /.table-responsive -->
            </div>
            <!-- /.card-body -->
            <div class="card-footer clearfix">
            </div>
            <!-- /.card-footer -->
        </div>

    </div>
</div>

@code {
    [Parameter]
    public ClientWidget WidgetInfo { get; set; }



    private Timer timer;
    private int refreshIntervalInSeconds;
    DataTable table = new DataTable();
    string message = string.Empty;
    List<string> errors = new List<string>();


    protected override async Task OnInitializedAsync()
    {
        var Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Data;
        message = Data.Message;
        errors = message.Split(";").ToList();

        if (table.Rows.Count > 0)
        {
            //ColumnNames = Rows[0].Keys.ToList();
            refreshIntervalInSeconds = WidgetInfo.WidgetInfo.REFRESHINTERVAL;
            timer = new Timer(RefreshWidget, null, TimeSpan.Zero, TimeSpan.FromSeconds(refreshIntervalInSeconds));
        }

    }

    private async void RefreshWidget(object state)
    {
        var Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Data;
        message = Data.Message;
        errors = message.Split(";").ToList();

        // Call the StateHasChanged method to notify the component to re-render
        await InvokeAsync(StateHasChanged);
    }


}
