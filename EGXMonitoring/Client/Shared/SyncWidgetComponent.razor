@inject IWidgetService WidgetService
<br />
<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header border-transparent">
                <h3 class="card-title">@WidgetInfo.WidgetInfo.NAME</h3>

                <div class="card-tools">
                    <button type="button" class="btn btn-tool" data-card-widget="collapse">
                        <i class="fas fa-minus"></i>
                    </button>

                </div>
            </div>
            <!-- /.card-header -->
            <div class="card-body p-0">
                <div class="table-responsive">
                    <table class="table m-0">
                        <thead>
                            <tr>
                                @foreach (var columnName in ColumnNames)
                                {
                                    @if (columnName.ToLower() != "id" && columnName != WidgetInfo.WidgetInfo.GROUPCOLUMN)
                                    {
                                        <th>@columnName</th>
                                    }
                                }
                            </tr>
                        </thead>
                        @if (!string.IsNullOrEmpty(WidgetInfo.WidgetInfo.GROUPCOLUMN))
                        {
                            var groupedRows = Rows.GroupBy(row => row[WidgetInfo.WidgetInfo.GROUPCOLUMN]);

                            foreach (var group in groupedRows)
                            {
                                <h6>@group.Key</h6>
                                <tbody>
                                    @foreach (var row in group)
                                    {

                                        <tr>

                                            @foreach (var column in ColumnNames)
                                            {
                                                @if (column.ToLower() != "id" && column != WidgetInfo.WidgetInfo.GROUPCOLUMN)
                                                {
                                                    <td>@row[column]</td>
                                                }
                                            }
                                        </tr>
                                    }
                                </tbody>
                            }
                        }
                        else
                        {
                            <tbody>
                                @foreach (var row in Rows)
                                {
                                    <tr>
                                        @foreach (var column in ColumnNames)
                                        {
                                            @if (column.ToLower() != "id" && column != WidgetInfo.WidgetInfo.GROUPCOLUMN)
                                            {
                                                <td>@row[column]</td>
                                            }
                                        }
                                    </tr>
                                }
                            </tbody>

                        }
                    </table>
                </div>
                <!-- /.table-responsive -->
            </div>
            <!-- /.card-body -->
            <div class="card-footer clearfix">
                @*   <a href="javascript:void(0)" class="btn btn-sm btn-info float-left">Place New Order</a>
                <a href="javascript:void(0)" class="btn btn-sm btn-secondary float-right">View All Orders</a> *@
            </div>
            <!-- /.card-footer -->
        </div>

    </div>
</div>

@code {
    [Parameter]
    public ClientWidget WidgetInfo { get; set; }

    List<Dictionary<string, object>> Rows { get; set; } = new List<Dictionary<string, object>>();
    List<string> ColumnNames { get; set; } = new List<string>();

    private Timer timer;
    private int refreshIntervalInSeconds;


    protected override async Task OnInitializedAsync()
    {

        var widgetData = await WidgetService.GetWidgetData(WidgetInfo);
        Rows = (List<Dictionary<string, object>>)widgetData.Data;
        var groupedRows = Rows.GroupBy(r => r["Key"]);
        if (Rows.Count > 0)
        {
            ColumnNames = Rows[0].Keys.ToList();
            refreshIntervalInSeconds = WidgetInfo.WidgetInfo.REFRESHINTERVAL;
            //timer = new Timer(RefreshWidget, null, TimeSpan.Zero, TimeSpan.FromSeconds(refreshIntervalInSeconds));
        }

    }

    private async void RefreshWidget(object state)
    {
        var widgetData = await WidgetService.GetWidgetData(WidgetInfo);
        Rows = widgetData.Data;
        // Call the StateHasChanged method to notify the component to re-render
        InvokeAsync(StateHasChanged);
    }
}
