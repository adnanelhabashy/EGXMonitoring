@inject IWidgetService WidgetService
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
@using System.Globalization
@using System.Data




<div class="card-@WidgetInfo.WidgetInfo.NAME" id="Card-@WidgetInfo.WidgetInfo.NAME">
    <div class="card-header border-transparent">
        <h3 class="card-title"><strong>Status Widget</strong></h3>

        <div class="card-tools">
            <button type="button" @onclick="ToggleFullScreen" class="btn btn-tool">
                <i class="fa fa-fw fa-bars"></i>
            </button>
            @*             <button type="button" class="btn btn-tool" data-card-widget="collapse">
            <i class="fas fa-minus"></i>
            </button> *@
            <button type="button" @onclick="RefreshWidget" class="btn btn-tool">
                <i class="fa fa-fw fa-retweet"></i>
            </button>
            <div class="btn btn-tool">@DateTime.Now.ToString("hh:mm:ss tt")</div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-animation">
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        </div>
    }
    else
    {
        <!-- /.card-header -->
        <div class="card-body p-0">
            @if (Data.Success)
            {
                <div class="table-responsive">
                    <table class="table m-0">
                        <thead>
                            <tr>
                                @foreach (var column in table.Columns)
                                {
                                    <th>@column.ToString()</th>
                                }
                                <th>Error Time</th>
                                <th>Avoid Check</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (DataRow row in table.Rows)
                            {

                                string warningLevel = string.Empty;
                                string errorTime = string.Empty;
                                if (@row[WidgetInfo.WidgetInfo.VALUECOLMN].ToString() == "-1")
                                {


                                    if (WidgetInfo.WidgetInfo.CHECKTYPE == 1)
                                    {

                                        if (!SearchErrorTime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()))
                                        {
                                            ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()] = DateTime.Now;
                                            errorTime = DateTime.Now.ToString("hh:mm:ss tt");
                                        }
                                        else
                                        {
                                            errorTime = ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()].ToString("hh:mm:ss tt");
                                        }
                                        warningLevel = ProcessWarning(GetErrortime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()).ToString("hh:mm:ss tt"), row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString());

                                        if (warningLevel == "blinking3-row")
                                        {
                                            JSRuntime.InvokeVoidAsync("toast", "Alert in" + WidgetInfo.WidgetInfo.NAME, row[WidgetInfo.WidgetInfo.GROUPCOLUMN], "Failing since :" + ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()].ToString(), "Has Error");
                                        }
                                    }
                                    else if (WidgetInfo.WidgetInfo.CHECKTYPE == 2)
                                    {

                                        DateTime currentDateTime = DateTime.Now;
                                        if (WidgetInfo.WidgetInfo.AFTERTIME.HasValue && currentDateTime.TimeOfDay > WidgetInfo.WidgetInfo.AFTERTIME.Value.TimeOfDay && currentDateTime.TimeOfDay < WidgetInfo.WidgetInfo.ENDTIME.Value.TimeOfDay)
                                        {

                                            if (!SearchErrorTime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()))
                                            {
                                                ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()] = DateTime.Now;
                                                errorTime = DateTime.Now.ToString("hh:mm:ss tt");
                                            }
                                            else
                                            {
                                                errorTime = ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()].ToString("hh:mm:ss tt");
                                            }
                                            warningLevel = ProcessWarning(GetErrortime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()).ToString("hh:mm:ss tt"), row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString());

                                            if (warningLevel == "blinking3-row")
                                            {
                                                JSRuntime.InvokeVoidAsync("toast", "Alert in" + WidgetInfo.WidgetInfo.NAME, row[WidgetInfo.WidgetInfo.GROUPCOLUMN], "Failing since :" + ErrorTime[row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()].ToString(), "Has Error");
                                            }
                                        }
                                    }

                                }
                                else
                                {
                                    if (SearchErrorTime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString()))
                                    {
                                        RemoveErrorTime(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString());
                                        if (AlertSent && ErrorTime.Count == 0)
                                        {
                                            StopAlertEvent.InvokeAsync(eventData);
                                            AlertSent = false;
                                        }
                                    }
                                }
                                <tr class="@warningLevel">
                                    @foreach (DataColumn column in table.Columns)
                                    {

                                        if (column.ColumnName == WidgetInfo.WidgetInfo.VALUECOLMN)
                                        {
                                            if (@row[column].ToString() == "-1")
                                            {

                                                <td><span class="badge badge-danger">Error</span></td>

                                            }
                                            else if (@row[column].ToString() == "1" || @row[column].ToString() == "0")
                                            {
                                                <td><span class="badge badge-success">Success</span></td>

                                            }
                                            else
                                            {
                                                <td><span class="badge badge-info">@row[column]</span></td>
                                            }
                                        }
                                        else
                                        {
                                            <td>@row[column]</td>
                                        }

                                    }
                                    <td>
                                        @if (!string.IsNullOrEmpty(errorTime))
                                        {

                                            <p>@errorTime</p>
                                        }
                                        else
                                        {
                                            <p>-</p>
                                        }
                                    </td>
                                    <td>
                                        <input type="checkbox" @onclick="()=> IgnoreWarning(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString())" checked="@IsWarningIgnored(row[WidgetInfo.WidgetInfo.GROUPCOLUMN].ToString())" />
                                    </td>


                                </tr>
                            }


                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="card-body p-0">
                    <div class="text-container blinking3-row" style="min-height: 200px;">
                        <span style=" font-size: 18px;" class="centered-text"><strong>The following error occured : </strong>@Data.Message</span>
                    </div>
                </div>
            }
            <!-- /.table-responsive -->
        </div>
        <!-- /.card-body -->
        <div class="card-footer clearfix">
            @*   <a href="javascript:void(0)" class="btn btn-sm btn-info float-left">Place New Order</a>
        <a href="javascript:void(0)" class="btn btn-sm btn-secondary float-right">View All Orders</a> *@
            <button type="button" class="btn btn-info" data-toggle="modal" data-target="#@WidgetInfo.WidgetInfo.NAME.Replace(" ", "")">
                Launch Widget Information
            </button>
        </div>
    }
    <!-- /.card-footer -->
</div>

@* <WidgetInfoModal WidgetInfo="WidgetInfo"></WidgetInfoModal>
 *@<script>
       window.enterFullScreen = function (elementId) {
           const element = document.getElementById(elementId);
           if (element.requestFullscreen) {
               element.requestFullscreen();
           } else if (element.mozRequestFullScreen) {
               element.mozRequestFullScreen();
           } else if (element.webkitRequestFullscreen) {
               element.webkitRequestFullscreen();
           } else if (element.msRequestFullscreen) {
               element.msRequestFullscreen();
           }
       };

       window.exitFullScreen = function () {
           if (document.exitFullscreen) {
               document.exitFullscreen();
           } else if (document.mozCancelFullScreen) {
               document.mozCancelFullScreen();
           } else if (document.webkitExitFullscreen) {
               document.webkitExitFullscreen();
           } else if (document.msExitFullscreen) {
               document.msExitFullscreen();
           }
       };

       function toast(title, subtitle, body) {
           const toastOptions = {
               class: 'bg-danger',
               title: title,
               subtitle: subtitle,
               body: body,
               position: 'bottomLeft',
               autohide: true,
               delay: 10000,
           };
           $(document).Toasts('create', toastOptions);
       }
</script>
@code {
    [Parameter]
    public ClientWidget WidgetInfo { get; set; }
    [Parameter]
    public EventCallback<AlertEventData> SetAlertEvent { get; set; }
    [Parameter]
    public EventCallback<AlertEventData> StopAlertEvent { get; set; }
    private Timer timer;
    private int refreshIntervalInSeconds;
    DataTable table = new DataTable();
    string message = string.Empty;

    private bool isFullScreen = false;
    private bool isLoading = true;
    private bool isPlaying;

    bool RowHasError = false;

    Dictionary<string, DateTime> ErrorTime = new Dictionary<string, DateTime>();
    Dictionary<string, bool> IgnoredWarnings = new Dictionary<string, bool>();

    ServiceResponse<DataTable> Data = new ServiceResponse<DataTable>();
    private bool AlertSent = false;


    public int? Level1 { get; set; }
    public int? Level2 { get; set; }
    public int? Level3 { get; set; }

    AlertEventData eventData;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Success ? Data.Data : null;
        message = Data.Success ? Data.Message : "";


        //ColumnNames = Rows[0].Keys.ToList();
        refreshIntervalInSeconds = WidgetInfo.WidgetInfo.REFRESHINTERVAL;
        timer = new Timer(RefreshWidget, null, TimeSpan.Zero, TimeSpan.FromSeconds(refreshIntervalInSeconds));


        setWarningLevels(WidgetInfo.WidgetInfo.ALARMAFTER);

        isLoading = false;
        if (Data.Success)
        {
            eventData = new AlertEventData
                {
                    Message = WidgetInfo.WidgetInfo.NAME,
                    Severity = WidgetInfo.WidgetInfo.SEVERITY
                };
        }
    }

    private async Task ToggleFullScreen()
    {
        isFullScreen = !isFullScreen;

        if (isFullScreen)
        {
            await JSRuntime.InvokeVoidAsync("enterFullScreen", "Card-" + WidgetInfo.WidgetInfo.NAME);
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("exitFullScreen");
        }
    }


    private bool IsWarningIgnored(string groupname)
    {
        bool containsKey = IgnoredWarnings.ContainsKey(groupname);
        if (!containsKey)
        {
            IgnoredWarnings[groupname] = false; // Set the initial value to false
        }
        return IgnoredWarnings[groupname];
    }

    private void IgnoreWarning(string groupname)
    {
        IgnoredWarnings[groupname] = !IgnoredWarnings[groupname];
    }

    private async void RefreshWidget(object state)
    {
        Data = await WidgetService.GetWidgetData(WidgetInfo);
        table = Data.Success ? Data.Data : null;
        message = Data.Success ? Data.Message : "";

        // Call the StateHasChanged method to notify the component to re-render
        await InvokeAsync(StateHasChanged);
    }


    private bool SearchErrorTime(string groupname)
    {
        bool containsKey = ErrorTime.ContainsKey(groupname);
        return containsKey;
    }

    private DateTime GetErrortime(string groupname)
    {
        return ErrorTime[groupname];
    }

    private void RemoveErrorTime(string groupname)
    {
        bool removed = ErrorTime.Remove(groupname);
    }

    private void setWarningLevels(int? minutes)
    {
        int? milseconds = minutes * 60 * 1000;

        Level1 = milseconds / 3;
        Level2 = Level1 * 2;
        Level3 = Level1 * 3;
    }

    private string ProcessWarning(string time, string groupname)
    {
        DateTime currentTime = DateTime.Now;
        DateTime parsedTime = DateTime.ParseExact(time, "hh:mm:ss tt", CultureInfo.InvariantCulture);
        TimeSpan timeDifference = parsedTime - currentTime;
        long timeDifferenceMilliseconds = (long)timeDifference.TotalMilliseconds * -1;
        if (IsWarningIgnored(groupname))
        {
            return ""; // Return empty string to disable warning styling
        }
        if (timeDifferenceMilliseconds >= 0 && timeDifferenceMilliseconds <= Level1)
        {
            return "blinking1-row";
        }
        else if (timeDifferenceMilliseconds >= Level1 && timeDifferenceMilliseconds <= Level2)
        {
            return "blinking2-row";
        }
        else if (timeDifferenceMilliseconds >= Level2 && timeDifferenceMilliseconds <= Level3)
        {
            return "blinking3-row";
        }
        else
        {
            if (!AlertSent)
            {
                SetAlertEvent.InvokeAsync(eventData);
                AlertSent = true;
            }
            return "blinking3-row";
        }
    }
}
