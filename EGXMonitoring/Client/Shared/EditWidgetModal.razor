@inject IWidgetService WidgetService
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop
<div class="modal fade" id="editModal_@WidgetInfo.WidgetInfo.ID" tabindex="-1" role="dialog" aria-labelledby="editModalLabel_@WidgetInfo.WidgetInfo.ID" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editModalLabel_@WidgetInfo.WidgetInfo.ID">Edit Widget @WidgetInfo.WidgetInfo.NAME</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <EditForm Model="WidgetInfo.WidgetInfo" OnValidSubmit="HandleSave">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <div class="modal-body">
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Name</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.NAME" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.NAME)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Refresh Interval (in seconds)</label>
                        <div class="col-sm-10">
                            <InputNumber type="text" @bind-Value="WidgetInfo.WidgetInfo.REFRESHINTERVAL" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.REFRESHINTERVAL)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Alarm After (in minutes)</label>
                        <div class="col-sm-10">
                            <InputNumber type="text" @bind-Value="WidgetInfo.WidgetInfo.ALARMAFTER" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.ALARMAFTER)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">SQL Command</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.SQLCOMMAND" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.SQLCOMMAND)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">Connection String</label>
                        <div class="col-sm-10">
                            <InputTextArea type="text" @bind-Value="WidgetInfo.ConnectionString" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.ConnectionString)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">

                        <label class="col-sm-2 col-form-label">Value Column</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.VALUECOLMN" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.VALUECOLMN)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Group Column</label>
                        <div class="col-sm-10">
                            <InputText type="text" @bind-Value="WidgetInfo.WidgetInfo.GROUPCOLUMN" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.GROUPCOLUMN)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="form-group row">
                        <label class="col-sm-2 col-form-label">Description</label>
                        <div class="col-sm-10">
                            <InputTextArea type="text" @bind-Value="WidgetInfo.WidgetInfo.DESCRIPTION" class="form-control" placeholder="" />
                            <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.DESCRIPTION)"></ValidationMessage>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Widget Type</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.WIDGETTYPE" class="custom-select" placeholder="">
                                    <option value="1">Sync Widget</option>
                                    <option value="2">Status Widget</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.WIDGETTYPE)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Tab To Place</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.TABID" class="custom-select" placeholder="">
                                    <option value="1">During Session</option>
                                    <option value="2">End of Day </option>
                                    <option value="3">Running Procedures</option>
                                    <option value="4">Vetting</option>
                                </InputSelect>
                                <ValidationMessage class="validation-message" For="@(() => WidgetInfo.WidgetInfo.TABID)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Severity</label>
                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.SEVERITY" class="custom-select" placeholder="">
                                    <option value="1">Medium</option>
                                    <option value="2">High</option>
                                </InputSelect>
                                <ValidationMessage class="validation-message" For="@(() => WidgetInfo.WidgetInfo.SEVERITY)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <label>Check Type</label>

                                <InputSelect type="text" @bind-Value="WidgetInfo.WidgetInfo.CHECKTYPE" class="custom-select" @onchange="HandleCheckTypeChange" placeholder="">
                                    <option value="1">Instant</option>
                                    <option value="2">Time Interval</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.CHECKTYPE)"></ValidationMessage>
                            </div>
                        </div>
                    </div>
                    @if (showTimeInputs || WidgetInfo.WidgetInfo.CHECKTYPE == 2)
                    {
                        <div class="bootstrap-timepicker row">
                            <div class="form-group col-sm-4">
                                <label>Time Start</label>
                                <InputDate Type="InputDateType.Time" class="form-control datetimepicker-input" @bind-Value="@WidgetInfo.WidgetInfo.AFTERTIME" />
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.AFTERTIME)"></ValidationMessage>
                            </div>
                            <div class="form-group col-sm-4">
                                <label>Time End</label>
                                <InputDate Type="InputDateType.Time" class="form-control datetimepicker-input" @bind-Value="@WidgetInfo.WidgetInfo.ENDTIME" />
                                <ValidationMessage For="@(() => WidgetInfo.WidgetInfo.ENDTIME)"></ValidationMessage>
                            </div>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <div class="float-left">
                        <button type="button" class="btn btn-danger" @onclick="DeleteWidget">Delete Widget</button>
                    </div>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal"> Close </button>
                    <button type="submit" class="btn btn-primary"> Save changes </button>
                </div>
            </EditForm>
        </div>
    </div>
</div>
<script>


    function toastDanger(title, subtitle, body) {
        const toastOptions = {
            class: 'bg-danger',
            title: title,
            subtitle: subtitle,
            body: body,
            position: 'bottomLeft',
            autohide: true,
            delay: 10000,
        };
        $(document).Toasts('create', toastOptions);
    }
    function toastSuccess(title, subtitle, body) {
        const toastOptions = {
            class: 'bg-success',
            title: title,
            subtitle: subtitle,
            body: body,
            position: 'bottomLeft',
            autohide: true,
            delay: 10000,
        };
        $(document).Toasts('create', toastOptions);
    }
</script>

@code {
    [Parameter]
    public ClientWidget? WidgetInfo { get; set; }
    private bool showTimeInputs = false;
    ServiceResponse<ClientWidget> response = new ServiceResponse<ClientWidget>();
    protected override async Task OnInitializedAsync()
    {

    }
    [Parameter]
    public bool State { get; set; }

    [Parameter]
    public EventCallback<bool> StateChanged { get; set; }

    private async Task HandleSave()
    {
        if (WidgetInfo != null)
        {
            response = await WidgetService.UpdateWidget(WidgetInfo);

            if (response.Success)
            {
                await JSRuntime.InvokeVoidAsync("toastSuccess", WidgetInfo.WidgetInfo.NAME, "Update Status", response.Message);
                await ChangeParentState();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastDanger", WidgetInfo.WidgetInfo.NAME, "Update Status", response.Message);

            }
        }
    }



    private async Task DeleteWidget()
    {
        if (WidgetInfo != null)
        {
            response = await WidgetService.DeleteWidget(WidgetInfo);

            if (response.Success)
            {
                await JSRuntime.InvokeVoidAsync("toastSuccess", WidgetInfo.WidgetInfo.NAME, "Update Status", response.Message);
                await ChangeParentState();
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("toastDanger", WidgetInfo.WidgetInfo.NAME, "Update Status", response.Message);

            }
        }
    }

    private void HandleCheckTypeChange(ChangeEventArgs e)
    {
        int selectedValue = Convert.ToInt32(e.Value);
        showTimeInputs = (selectedValue == 2);
        StateHasChanged();
    }

    private async Task ChangeParentState()
    {
        State = !State;
        await StateChanged.InvokeAsync(State);
    }
}
